@page "/"
@using Radzen.Blazor
@using MoviesApp.Services.Interfaces
@using movies_api
@using Radzen
@inject IMovieService _movieService
@inject IUserService _userService
@inject NavigationManager _navigation

<PageTitle>Home</PageTitle>
<div class="sticky-top background">
    <div class="logo-banner"></div>

    <div class="justify-content-center rz-display-flex">
        <RadzenTextBox Placeholder="Search for a title..." class="w-75 rz-border-radius-6 rz-my-10 pl-3" Change="@(OnChange)"/>
    </div>
</div>

@if (shouldRender == false)
{
    <p>Loading...</p>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap">
        @foreach (var movie in moviesToDisplay.Results)
        {
            <RadzenCard Class="rz-my-2 rz-mx-2" Style="width: 420px">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                    @if (string.IsNullOrWhiteSpace(movie.PosterPath))
                    {
                        <RadzenImage Path="Images/MissingImage.png" Style="width: 100px; height: 100px; border-radius: 1%;"/>
                    }
                    else
                    {
                        <RadzenImage Path="@movie.PosterPath" Style="width: 100px; height: 100px; border-radius: 1%;"/>
                    }
                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0rem">

                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText TextStyle="TextStyle.Body1"><strong>@movie.Title</strong></RadzenText>
                             @if (movie.MovieId != 0)
                             {
                                <AuthorizeView>
                                    <RadzenButton Click="() => Favorite(movie)" Icon="@GetIcon(movie)" Style="border-radius: 50%; color: #507DBC; background-color: white;"/>
                                </AuthorizeView>
                             }
                        </RadzenStack>
                            @if (movie.MovieId != 0)
                            {
                                <RadzenText TextStyle="TextStyle.Body2">@ToYear(movie.ReleaseDate)</RadzenText>
                                <RadzenLabel Style="height: 60px; width: 250px; overflow:clip">@movie.Description</RadzenLabel>
                                <label class="details-link" @onclick="() => GoToMovie(movie.MovieId)">See more</label>  
                            }
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        }
    </RadzenStack>
}
@code
{   
    private MoviesResponseDto moviesToDisplay = new() { Results = new List<MovieDto>()};
    private string? userId;
    private bool shouldRender = false;
    
    protected override async Task OnInitializedAsync()
    {   
        userId = _userService.GetUserId();
        await GetTopFavorites();
    }
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        shouldRender = true;
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnChange(string title)
    {   
        if (string.IsNullOrWhiteSpace(title))
        {
            await GetTopFavorites();
            return;
        }
        try
        {
            shouldRender = false;
            moviesToDisplay = await _movieService.GetMoviesByTitleAsync(title, userId);
            if (moviesToDisplay.Results.Count == 0)
            {
                SetResult("No results found");
            }
        }
        catch (Exception)
        {
            SetResult("An error has occured");
        }
    }

    private static string ToYear(string date) => DateTime.TryParse(date, out var dateTime) ? dateTime.Year.ToString() : string.Empty;

    private void GoToMovie(int? id)
    {
        _navigation.NavigateTo($"/Movie/{id}");
    }
    
    private async Task Favorite(MovieDto movie)
    {
        movie.IsFavorite = !movie.IsFavorite;
        FavoritesDto favorite = new() { MovieId = movie.MovieId, UserId = userId };

        if (movie.IsFavorite)
        {
            await _movieService.AddFavoriteMovieAsync(favorite);
        }
        else
        {
            await _movieService.RemoveFavoriteMovieAsync(favorite);
        }
    }
    
    private async Task GetTopFavorites()
    {  
        shouldRender = false;
        moviesToDisplay.Results.Clear();
        moviesToDisplay = await _movieService.GetTopFavoriteMovies(userId);
    }
    
    private void SetResult(string message)
    {
        moviesToDisplay.Results = new List<MovieDto> { new() { Title = message } };
    }

    private static string GetIcon(MovieDto movie)
    { 
        return movie.IsFavorite ? "favorite" : "favorite_border";
    }
}
