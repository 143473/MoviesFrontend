@page "/"
@using MoviesApp.Services.Interfaces
@using movies_api
@inject IMovieService _movieService
@inject IUserService _userService

<MovieHeader Title="Home" Header="@header" OnSearch="title => OnSearch(title)"></MovieHeader>
@if (shouldRender == false)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status"></div>
    </div>
}
else
{
    <MovieList Movies="@movies.Results" OnFavorite="movie => Favorite(movie)"></MovieList>
}
@code
{
    private MoviesResponseDto movies = new() { Results = new List<MovieDto>()};
    private string? userId;
    private bool shouldRender;
    private string header = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {   
        userId = _userService.GetUserId();
        await GetTopFavorites();
    }
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        shouldRender = true;
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnSearch(string title)
    {   
        if (string.IsNullOrWhiteSpace(title))
        {
            await GetTopFavorites();
            return;
        }
        try
        {
            shouldRender = false;
            header = "Search Results";
            movies = await _movieService.GetMoviesByTitleAsync(title, userId);
            if (movies.Results.Count == 0)
            {
                SetResult("No results found");
            }
        }
        catch (Exception)
        {
            SetResult("An error has occured");
        }
    }

    private async Task Favorite(MovieDto movie)
    {
        movie.IsFavorite = !movie.IsFavorite;
        FavoritesDto favorite = new() { MovieId = movie.MovieId, UserId = userId };

        try
        {
            if (movie.IsFavorite)
            {
                await _movieService.AddFavoriteMovieAsync(favorite);
            }
            else
            {
                await _movieService.RemoveFavoriteMovieAsync(favorite);
            }
        }
        catch (Exception)
        {
            movie.IsFavorite = !movie.IsFavorite;
        }
    }
    
    private async Task GetTopFavorites()
    {
        shouldRender = false;
        header = "Top Favorites";
        movies.Results.Clear();
        movies = await _movieService.GetTopFavoriteMovies(userId);
    }
    
    private void SetResult(string message)
    {
        movies.Results = new List<MovieDto> { new() { Title = message } };
    }
}
