@page "/Movie/{Id:int}"
@using MoviesApp.Services.Interfaces
@using movies_api
@inject IMovieService MovieService
@using Radzen.Blazor
@using Radzen
@inject IUserService UserService
@inject NotificationService NotificationService
@inject NavigationManager Navigation

@if (_shouldRender == false)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="3rem" Class="rz-p-4">

            <RadzenImage Path="@_movie.Poster_path" Style="border-radius: 1%;"/>

            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0rem">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText TextStyle="TextStyle.H3" Style="color: white" Class="rz-mb-5">
                        <strong>@_movie.Title</strong> <span style="color: gray">(@ToYear(_movie.Release_date))</span>
                    </RadzenText>
                    <FavoriteButton OnFavoriteSingle="m => Favorite(_movie)" MovieSingle="_movie"></FavoriteButton>
                </RadzenStack>
                <RadzenText TextStyle="TextStyle.H6" Style="color: white; font-style: italic" Class="rz-mb-7">"@_movie.Tagline"</RadzenText>
                <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4">
                    <strong>Overview</strong>
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Style="color: white" Class="rz-mb-7">@_movie.Overview</RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4">
                        <strong>Rating</strong>
                    </RadzenText>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: white" Class="rz-pr-4">@_movieRating.ToString("#.##")</RadzenText>
                    <div class="rz-pr-4 rz-text-align-center">
                        <RadzenRating TValue="int" Stars="10" Value=@_value Change=@(args => _value = args)></RadzenRating>
                    </div>
                    <RadzenButton IsBusy="@_loading" Shade="Shade.Lighter" Click=@(() => RateMovie(_movie.Id)) Text="Rate" ButtonStyle="ButtonStyle.Light"/>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white" Class="rz-pr-2 rz-mb-7">Votes</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white" Class="rz-mb-7">@_numberOfVotes.ToString("N0")</RadzenText>
                </RadzenStack>
                <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4 rz-mb-5">
                    <strong>Details</strong>
                </RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <div class="container" style="padding-left: 0">
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0" Class="rz-pr-4">
                                    <strong>Status</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@_movie.Status</p>
                            </div>
                            <div class="col-sm">
                                <p Style="color: white; margin: 0" Class="rz-pr-4">
                                    <strong>Original Language</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@ToOriginalLanguage(_movie.Original_language)</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0" Class="rz-pr-4">
                                    <strong>Budget</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">$@_movie.Budget?.ToString("N0")</p>
                            </div>
                            <div class="col-sm">
                                <p Style="color: white; margin: 0" Class="rz-pr-4">
                                    <strong>Revenue</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">$@_movie.Revenue?.ToString("N0")</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0" Class="rz-pr-4">
                                    <strong>Runtime</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">
                                    @if (_movie.Runtime != null)
                                    {
                                        @MinutesToHours(_movie.Runtime.Value)
                                    }
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0" Class="rz-pr-4">
                                    <strong>Genres</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@_genres</p>
                            </div>
                        </div>
                    </div>
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    <RadzenTabs @bind-SelectedIndex=@_selectedIndex Change=@OnChange RenderMode="TabRenderMode.Server">
        <Tabs>
            @if (_movieCredits.Cast != null || _movieCredits.Crew != null)
            {
                <RadzenTabsItem Text="Actors" Style="background-color: #04080F; font-weight: bold;">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Style="overflow: scroll">
                        @foreach (var actor in _cast)
                        {
                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0.1em">
                                <RadzenStack @onclick="() => GoToPerson(actor.Id)" Style="cursor: pointer;">
                                    <RadzenImage Path="@(actor.Profile_path ?? "Images/MissingImage.png")" Style="border-radius: 1%; height: 170px"/>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text"> @actor.Name</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: #BBD1EA"> @actor.Character </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        }
                    </RadzenStack>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Directors" Style="background-color: #04080F; font-weight: bold;">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Style="overflow: scroll">
                        @foreach (var director in _directors)
                        {
                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0.1em">
                                <RadzenStack @onclick="() => GoToPerson(director.Id)" Style="cursor: pointer;">
                                    <RadzenImage Path="@(director.Profile_path ?? "Images/MissingImage.png")" Style="border-radius: 1%; height: 170px"/>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text"> @director.Name</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: #BBD1EA"> @director.Job </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        }
                    </RadzenStack>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Crew" Style="background-color: #04080F; font-weight: bold;">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Style="overflow: scroll">
                        @foreach (var crewMember in _crew)
                        {
                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0.1em">
                                <RadzenStack @onclick="() => GoToPerson(crewMember.Id)" Style="cursor: pointer;">
                                    <RadzenImage Path="@(crewMember.Profile_path ?? "Images/MissingImage.png")" Style="border-radius: 1%; height: 170px"/>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text"> @crewMember.Name</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: #BBD1EA"> @crewMember.Job </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        }
                    </RadzenStack>
                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
    <RadzenTemplateForm TItem="CommentDto" Data=@_comment Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
        <RadzenFormField Text="Comment" Variant="Variant.Text" Style="width: 100%; outline-width: 0;">
            <RadzenTextBox @bind-Value="@_commentText" Style="color: white; width: 100%;" />
        </RadzenFormField>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0rem">
        <RadzenButton ButtonType="ButtonType.Submit" Text="Comment" ButtonStyle="ButtonStyle.Light"></RadzenButton>
        </RadzenStack>
    </RadzenTemplateForm>
    <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-mt-4">
        <strong>Comments</strong>
    </RadzenText>
 
    @foreach (var comment in _comments)
    {
        <RadzenCard Class="rz-py-8 rz-pl-0" Style="max-width: 100%; background-color: #04080F">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem">
                <RadzenText TextStyle="TextStyle.Body1" Style="color: white">@comment.Username:</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Style="color: white">@comment.Text</RadzenText>
            </RadzenStack>
        </RadzenCard>
    }
}

@code {

    [Parameter]
    public int Id { get; set; }
    string _commentText = "";
    int _value;
    private MovieResponseDto _movie = null!;
    private RatingDto _rating = null!;
    private Boolean _shouldRender = false;
    private string? _userId;
    private double _movieRating;
    private Boolean _loading = false;
    private int _numberOfVotes;
    private string _genres = "No genres available";
    int _selectedIndex = 0;
    MovieCreditsResponseDto _movieCredits = null!;
    List<MovieCastDto> _cast = new List<MovieCastDto>();
    List<MovieCrewDto> _directors = new List<MovieCrewDto>();
    List<MovieCrewDto> _crew = new List<MovieCrewDto>();
    readonly CommentDto _comment = new CommentDto();
    List<CommentDto> _comments = new List<CommentDto>();
    CommentsDto _commentsDto = new CommentsDto();
    private string _username = null!;

    protected override async Task OnInitializedAsync()
    {   
        SetUserId();
        _movie = new MovieResponseDto();
        _rating = new RatingDto();
        _movie = await MovieService.GetMovieAsync(_userId, Id);
        _rating = await MovieService.GetMovieRatingAsync(Id);
        if (_rating.MovieId != null && _rating.MovieId.Value == _movie.Id)
        {
            if (_rating.RatingValue != null) _movieRating = _rating.RatingValue.Value;
            if (_rating.Votes != null) _numberOfVotes = _rating.Votes.Value;
        }
        else
        {
            if (_movie.Vote_average != null) _movieRating = _movie.Vote_average.Value;
            if (_movie.Vote_count != null) _numberOfVotes = _movie.Vote_count.Value;
        }
        if (_movie.Genres != null)
        {
            _genres = String.Join(", ", _movie.Genres.Select(g => g.Name));
        }

        _movieCredits = await MovieService.GetMovieCreditsAsync(Id);

        _cast = _movieCredits.Cast.OrderByDescending(c => c.Popularity).ToList();
        _directors =  _movieCredits.Crew.Where(c => c.Job == "Director").ToList();
        _crew = _movieCredits.Crew.Where(c => !c.Job.Equals("Director")).ToList();
        _commentsDto = await MovieService.GetCommentsAsync(Id);
        _comments = _commentsDto.Comments.ToList();
        GetUserName();
    }

    private async void CheckRatingInDb()
    {
        _rating = await MovieService.GetMovieRatingAsync(Id);
        if (_rating.MovieId != null && _rating.MovieId.Value == _movie.Id)
        {
            if (_rating.RatingValue != null) _movieRating = _rating.RatingValue.Value;
            if (_rating.Votes != null) _numberOfVotes = _rating.Votes.Value;
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        _shouldRender = true;
        return base.OnAfterRenderAsync(firstRender);
    }

    private static string ToYear(string date) => DateTime.TryParse(date, out var dateTime) ? dateTime.Year.ToString() : string.Empty;

    private async void RateMovie(int? id)
    {
        if (_value == 0)
        {
            NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "No rating value selected", Duration = 4000});
        }
        else if (_userId == null)
        {
            NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Log in to rate", Duration = 4000});
        }
        else
        {
            _loading = true;
            RatedMovieDto ratedMovie = new RatedMovieDto()
            {
                RatedMovieId = id,
                Rating = _value,
                UserId = _userId
            };

            await MovieService.AddRatingAsync(ratedMovie);

            CheckRatingInDb();
            await Task.Delay(1000);
            _loading = false;
            NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Rating Saved", Duration = 4000});
            StateHasChanged();
        }
    }

    private void SetUserId()
    {
        _userId = UserService.GetUserId();
    }
    
    private async Task Favorite(MovieResponseDto movie)
    {
        movie.IsFavorite = !movie.IsFavorite;
        FavoritesDto favorite = new() { MovieId = movie.Id, UserId = _userId };

        try
        {
            if (movie.IsFavorite != null && movie.IsFavorite.Value)
            {   

                await MovieService.AddFavoriteMovieAsync(favorite);
                NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Movie saved in favorites", Duration = 4000});
                
            }
            else
            {
                await MovieService.RemoveFavoriteMovieAsync(favorite);
                NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Movie removed from favorites", Duration = 4000});

            }
        }
        catch (Exception)
        {
            movie.IsFavorite = !movie.IsFavorite;
        }
    }

    private static string ToOriginalLanguage(string language)
    {
        return language == "en" ? "English" : "No language available";
    }

    void OnChange(int index)
    {
    }
    
    private void GoToPerson(int? id)
    {
        Navigation.NavigateTo($"/People/{id}");
    }

    private async Task OnSubmit()
    {
        if (_userId != null)
        {
            var comment = new CommentDto()
            {
                MovieId = Id,
                Text = _commentText,
                UserId = _userId,
                Username = _username
            };
            await MovieService.AddCommentAsync(comment);
            // Should probably just return the new comment and add to the list to avoid all the calls the the api
            _commentsDto = await MovieService.GetCommentsAsync(Id);
            _comments = _commentsDto.Comments.ToList();
            _commentText = "";
        }
        else
        {
            NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Log in to leave comment", Duration = 4000});
        }
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs obj)
    {
        NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Comment could not be saved", Duration = 4000});
    }
    
    private void GetUserName()
    {
        _username = UserService.GetUserName();
    }

    private string MinutesToHours(int minutes)
    {
        var time = TimeSpan.FromMinutes(minutes);
        return $"{Math.Floor(time.TotalHours)}h {time.Minutes}min";
    }

}