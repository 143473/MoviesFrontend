@page "/Movie/{Id:int}"
@using MoviesApp.Services.Interfaces
@using movies_api
@inject IMovieService _movieService
@using Radzen.Blazor
@using Radzen
@inject IUserService _userService
@inject NotificationService _notificationService
@inject NavigationManager _navigation

@if (shouldRender == false)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="3rem" Class="rz-p-4">

            <RadzenImage Path="@movie.Poster_path" Style="border-radius: 1%;"/>

            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0rem">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText TextStyle="TextStyle.H3" Style="color: white" Class="rz-mb-5">
                        <strong>@movie.Title</strong> <span style="color: gray">(@ToYear(movie.Release_date))</span>
                    </RadzenText>
                    <FavoriteButton OnFavoriteSingle="m => Favorite(movie)" MovieSingle="movie" ></FavoriteButton>
                </RadzenStack>
                <RadzenText TextStyle="TextStyle.H6" Style="color: white; font-style: italic" Class="rz-mb-7">"@movie.Tagline"</RadzenText>
                <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4">
                    <strong>Overview</strong>
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Style="color: white" Class="rz-mb-7">@movie.Overview</RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4">
                        <strong>Rating</strong>
                    </RadzenText>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: white" Class="rz-pr-4">@movieRating.ToString("#.##")</RadzenText>
                    <div class="rz-pr-4 rz-text-align-center">
                        <RadzenRating TValue="int" Stars="10" Value=@value Change=@(args => value = args)></RadzenRating>
                    </div>
                    <RadzenButton IsBusy="@loading" Shade="Shade.Lighter" Click=@(() => RateMovie(movie.Id)) Text="Rate" ButtonStyle="ButtonStyle.Light"/>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white" Class="rz-pr-2 rz-mb-7">Votes</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white" Class="rz-mb-7">@numberOfVotes</RadzenText>
                </RadzenStack>
                <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4 rz-mb-5">
                    <strong>Details</strong>
                </RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <div class="container" style="padding-left: 0">
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Status</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@movie.Status</p>
                            </div>
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Original Language</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@ToOriginalLanguage(movie.Original_language)</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Budget</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">$@movie.Budget</p>
                            </div>
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Revenue</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">$@movie.Revenue</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Runtime</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@movie.Runtime minutes</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Genres</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@genres</p>
                            </div>
                        </div>
                    </div>
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    <RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnChange RenderMode="TabRenderMode.Server">
        <Tabs>
            @if (movieCredits.Cast != null || movieCredits.Cast.Any() || movieCredits.Crew != null || movieCredits.Crew.Any())
            {
                <RadzenTabsItem Text="Actors" Style="background-color: #04080F; font-weight: bold;">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Style="overflow: scroll">
                        @foreach (var actor in cast)
                        {
                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0.1em">
                                <RadzenStack @onclick="() => GoToPerson(actor.Id)" Style="cursor: pointer;">
                                    <RadzenImage Path="@(actor.Profile_path ?? "Images/MissingImage.png")" Style="border-radius: 1%; height: 170px"/>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text"> @actor.Name</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: #BBD1EA"> @actor.Character </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        }
                    </RadzenStack>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Directors" Style="background-color: #04080F; font-weight: bold;">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Style="overflow: scroll">
                        @foreach (var director in directors)
                        {
                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0.1em">
                                <RadzenStack @onclick="() => GoToPerson(director.Id)" Style="cursor: pointer;">
                                    <RadzenImage Path="@(director.Profile_path ?? "Images/MissingImage.png")" Style="border-radius: 1%; height: 170px"/>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text"> @director.Name</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: #BBD1EA"> @director.Job </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        }
                    </RadzenStack>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Crew" Style="background-color: #04080F; font-weight: bold;">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Style="overflow: scroll">
                        @foreach (var crewMember in crew)
                        {
                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0.1em">
                                <RadzenStack @onclick="() => GoToPerson(crewMember.Id)" Style="cursor: pointer;">
                                    <RadzenImage Path="@(crewMember.Profile_path ?? "Images/MissingImage.png")" Style="border-radius: 1%; height: 170px"/>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text"> @crewMember.Name</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: #BBD1EA"> @crewMember.Job </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        }
                    </RadzenStack>
                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
    <RadzenTemplateForm TItem="CommentDto" Data=@_comment Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
        <RadzenFormField Text="Comment" Variant="Variant.Text" Style="width: 100%; outline-width: 0;">
            <RadzenTextBox @bind-Value="@commentText" Style="width: 100%;" />
        </RadzenFormField>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0rem">
        <RadzenButton ButtonType="ButtonType.Submit" Text="Comment" ButtonStyle="ButtonStyle.Light"></RadzenButton>
        </RadzenStack>
    </RadzenTemplateForm>
    <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-mt-4">
        <strong>Comments</strong>
    </RadzenText>
 
    @foreach (var comment in _comments)
    {
        <RadzenCard Class="rz-py-8 rz-pl-0" Style="max-width: 100%; background-color: #04080F">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem">
                <RadzenText TextStyle="TextStyle.Body1" Style="color: white">@comment.Username:</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Style="color: white">@comment.Text</RadzenText>
            </RadzenStack>
        </RadzenCard>
    }
}

@code {

    [Parameter]
    public int Id { get; set; }
    string commentText = "";
    int value;
    private MovieResponseDto movie;
    private RatingDto rating;
    private Boolean movieInDb = false;
    private Boolean shouldRender = false;
    private string? userId;
    private double movieRating;
    private Boolean loading = false;
    private int numberOfVotes;
    private string genres = "No genres available";
    int selectedIndex = 0;
    MovieCreditsResponseDto movieCredits;
    List<MovieCastDto> cast = new List<MovieCastDto>();
    List<MovieCrewDto> directors = new List<MovieCrewDto>();
    List<MovieCrewDto> crew = new List<MovieCrewDto>();
    CommentDto _comment = new CommentDto();
    List<CommentDto> _comments = new List<CommentDto>();
    CommentsDto _commentsDto = new CommentsDto();
    private string username;

    protected override async Task OnInitializedAsync()
    {   
        SetUserId();
        movie = new MovieResponseDto();
        rating = new RatingDto();
        movie = await _movieService.GetMovieAsync(userId, Id);
        rating = await _movieService.GetMovieRatingAsync(Id);
        if (rating.MovieId.Value == movie.Id)
        {
            movieRating = rating.RatingValue.Value;
            numberOfVotes = rating.Votes.Value;
        }
        else
        {
            movieRating = movie.Vote_average.Value;
            numberOfVotes = movie.Vote_count.Value;
        }
        if (movie.Genres != null)
        {
            genres = String.Join(", ", movie.Genres.Select(g => g.Name));
        }

        movieCredits = await _movieService.GetMovieCreditsAsync(Id);

        cast = movieCredits.Cast.OrderByDescending(c => c.Popularity).ToList();
        directors =  movieCredits.Crew.Where(c => c.Job == "Director").ToList();
        crew = movieCredits.Crew.Where(c => !c.Job.Equals("Director")).ToList();
        _commentsDto = await _movieService.GetCommentsAsync(Id);
        _comments = _commentsDto.Comments.ToList();
        GetUserName();
    }

    private async void CheckRatingInDb()
    {
        rating = await _movieService.GetMovieRatingAsync(Id);
        if (rating.MovieId.Value == movie.Id)
        {
            movieRating = rating.RatingValue.Value;
            numberOfVotes = rating.Votes.Value;
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        shouldRender = true;
        return base.OnAfterRenderAsync(firstRender);
    }

    private static string ToYear(string date) => DateTime.TryParse(date, out var dateTime) ? dateTime.Year.ToString() : string.Empty;

    private async void RateMovie(int? id)
    {
        if (value == 0)
        {
            _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "No rating value selected", Duration = 4000});
        }
        else if (userId == null)
        {
            _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Log in to rate", Duration = 4000});
        }
        else
        {
            loading = true;
            RatedMovieDto ratedMovie = new RatedMovieDto()
            {
                RatedMovieId = id,
                Rating = value,
                UserId = userId
            };

            await _movieService.AddRatingAsync(ratedMovie);

            CheckRatingInDb();
            await Task.Delay(1000);
            loading = false;
            _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Rating Saved", Duration = 4000});
            StateHasChanged();
        }
    }

    private void SetUserId()
    {
        userId = _userService.GetUserId();
    }
    
    private async Task Favorite(MovieResponseDto movie)
    {
        movie.IsFavorite = !movie.IsFavorite;
        FavoritesDto favorite = new() { MovieId = movie.Id, UserId = userId };

        try
        {
            if (movie.IsFavorite.Value)
            {   

                await _movieService.AddFavoriteMovieAsync(favorite);
                _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Movie saved in favorites", Duration = 4000});
                
            }
            else
            {
                await _movieService.RemoveFavoriteMovieAsync(favorite);
                _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Movie removed from favorites", Duration = 4000});

            }
        }
        catch (Exception)
        {
            movie.IsFavorite = !movie.IsFavorite;
        }
    }

    private static string ToOriginalLanguage(string language)
    {
        return language == "en" ? "English" : "No language available";
    }

    void OnChange(int index)
    {
    }
    
    private void GoToPerson(int? id)
    {
        _navigation.NavigateTo($"/People/{id}");
    }
    
    private class Comment
    {
        public int Id { get; set; }
        public string UserId { get; set; }
        public string Text { get; set; }
        public int MovieId { get; set; }
        public string Username { get; set; }
    }

    private async Task OnSubmit(CommentDto comment)
    {
        if (userId != null)
        {
            comment = new CommentDto()
            {
                MovieId = Id,
                Text = commentText,
                UserId = userId,
                Username = username
            };
            await _movieService.AddCommentAsync(comment);
            // Should probably just return the new comment and add to the list to avoid all the calls the the api
            _commentsDto = await _movieService.GetCommentsAsync(Id);
            _comments = _commentsDto.Comments.ToList();
            commentText = "";
        }
        else
        {
            _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Log in to leave comment", Duration = 4000});
        }
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs obj)
    {
        _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Comment could not be saved", Duration = 4000});
    }
    
    private void GetUserName()
    {
        username = _userService.GetUserName();
    }

}