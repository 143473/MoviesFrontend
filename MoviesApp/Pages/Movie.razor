@page "/Movie/{Id:int}"
@using MoviesApp.Services.Interfaces
@using movies_api
@inject IMovieService _movieService
@using Radzen.Blazor
@using Radzen
@using System.Security.Claims
@inject NotificationService _notificationService

@if (shouldRender == false)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">

            <RadzenImage Path="@movie.Poster_path" Style="border-radius: 1%;"/>

            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="0rem">
                <RadzenText TextStyle="TextStyle.H3" Style="color: white">
                    <strong>@movie.Title</strong> <span style="color: gray">(@ToYear(movie.Release_date))</span>
                </RadzenText>
                <RadzenText TextStyle="TextStyle.H6" Style="color: white; font-style: italic" Class="rz-mb-4">"@movie.Tagline"</RadzenText>
                <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4"><strong>Overview</strong></RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Style="color: white" Class="rz-mb-4">@movie.Overview</RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4"><strong>Rating</strong></RadzenText>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: white" Class="rz-pr-4">@movieRating.ToString("#.##")</RadzenText>
                    <div class="rz-pr-4 rz-text-align-center">
                        <RadzenRating TValue="int" Stars="10" Value=@value Change=@(args => value = args)></RadzenRating>
                    </div>
                    <RadzenButton IsBusy="@loading" Shade="Shade.Lighter" Click=@(() => RateMovie(movie.Id)) Text="Rate" ButtonStyle="ButtonStyle.Light"/>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white" Class="rz-pr-2 rz-mb-4">Votes</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white" Class="rz-mb-4">@numberOfVotes</RadzenText>
                </RadzenStack>
                <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4 rz-mb-4"><strong>Details</strong></RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0rem">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Status</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@movie.Status</p>
                            </div>
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Original Language</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@movie.Original_language</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Genres</strong>
                                </p>
                                 <p Style="color: white" Class="rz-pr-4">@genres</p>
                            </div>
                            </div>
                        <div class="row">
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Budget</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@movie.Budget</p>
                            </div>
                            <div class="col-sm">
                                <p Style="color: white; margin: 0px" Class="rz-pr-4">
                                    <strong>Revenue</strong>
                                </p>
                                <p Style="color: white" Class="rz-pr-4">@movie.Revenue</p>
                            </div>

                        </div>
                    </div>
                </RadzenStack>

                <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4">Budget: @movie.Budget</RadzenText>

                <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4">Duration:@movie.Runtime</RadzenText>
                <RadzenText TextStyle="TextStyle.H5" Style="color: white" Class="rz-pr-4">Revenue:@movie.Revenue</RadzenText>


            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    <AuthorizeView>
        @{ SetUserId(context); }
        ;
    </AuthorizeView>
}

@code {

    [Parameter]
    public int Id { get; set; }

    int value;
    private MovieResponseDto movie;
    private RatingDto rating;
    private Boolean movieInDb = false;
    private Boolean shouldRender = false;
    private string? userId;
    private double movieRating;
    private Boolean loading = false;
    private int numberOfVotes;
    private string genres = "DO THE GENRESDTO";

    protected override async Task OnInitializedAsync()
    {
        movie = new MovieResponseDto();
        rating = new RatingDto();
        movie = await _movieService.GetMovieAsync(Id);
        rating = await _movieService.GetMovieRatingAsync(Id);
        if (rating.MovieId.Value == movie.Id)
        {
            movieRating = rating.RatingValue.Value;
            numberOfVotes = rating.Votes.Value;
        }
        else
        {
            movieRating = movie.Vote_average.Value;
            numberOfVotes = movie.Vote_count.Value;
        }
    }

    private async void CheckRatingInDb()
    {
        rating = await _movieService.GetMovieRatingAsync(Id);
        if (rating.MovieId.Value == movie.Id)
        {
            movieRating = rating.RatingValue.Value;
            numberOfVotes = rating.Votes.Value;
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        shouldRender = true;
        return base.OnAfterRenderAsync(firstRender);
    }

    private static string ToYear(string date) => DateTime.TryParse(date, out var dateTime) ? dateTime.Year.ToString() : string.Empty;

    private async void RateMovie(int? id)
    {
        if (value == 0)
        {
            _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Warning, Summary = "No rating value selected", Duration = 4000});
        }
        else if (userId == null)
        {
            _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Warning, Summary = "Log in to rate", Duration = 4000});
        }
        else
        {
            loading = true;
            RatedMovieDto ratedMovie = new RatedMovieDto()
            {
                RatedMovieId = id,
                Rating = value,
                UserId = userId
            };

            await _movieService.AddRatingAsync(ratedMovie);

            CheckRatingInDb();
            await Task.Delay(1000);
            loading = false;
            _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Rating Saved", Duration = 4000});
            StateHasChanged();
        }
    }

    private void SetUserId(AuthenticationState context)
    {
        userId = context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

}